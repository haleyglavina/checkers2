[{"/Users/haleyglavina/Desktop/code/checkers2/client/src/index.js":"1","/Users/haleyglavina/Desktop/code/checkers2/client/src/reportWebVitals.js":"2","/Users/haleyglavina/Desktop/code/checkers2/client/src/App.js":"3","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/HomePage/HomePage.js":"4","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/NavBar/NavBar.js":"5","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Game/Game.js":"6","/Users/haleyglavina/Desktop/code/checkers2/client/src/utils/ThemeContext.js":"7","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/NavBar/styles.js":"8","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Game/styles.js":"9","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Toggle/Toggle.js":"10","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Board/Board.js":"11","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Score/Score.js":"12","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Board/styles.js":"13","/Users/haleyglavina/Desktop/code/checkers2/client/src/utils/BoardFunctions.js":"14","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Score/styles.js":"15","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Tile/Tile.js":"16","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Tile/styles.js":"17","/Users/haleyglavina/Desktop/code/checkers2/client/src/utils/BoardTestSetup.js":"18"},{"size":500,"mtime":1635009620144,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1635009620146,"results":"21","hashOfConfig":"20"},{"size":149,"mtime":1636933132844,"results":"22","hashOfConfig":"20"},{"size":1104,"mtime":1640313662826,"results":"23","hashOfConfig":"20"},{"size":935,"mtime":1640697952370,"results":"24","hashOfConfig":"20"},{"size":1788,"mtime":1640746945384,"results":"25","hashOfConfig":"20"},{"size":184,"mtime":1639950516104,"results":"26","hashOfConfig":"20"},{"size":1151,"mtime":1640036288553,"results":"27","hashOfConfig":"20"},{"size":149,"mtime":1640312713191,"results":"28","hashOfConfig":"20"},{"size":747,"mtime":1640697861463,"results":"29","hashOfConfig":"20"},{"size":3913,"mtime":1640728859411,"results":"30","hashOfConfig":"20"},{"size":943,"mtime":1640313222245,"results":"31","hashOfConfig":"20"},{"size":312,"mtime":1640311116842,"results":"32","hashOfConfig":"20"},{"size":9760,"mtime":1640728523209,"results":"33","hashOfConfig":"20"},{"size":273,"mtime":1640312725779,"results":"34","hashOfConfig":"20"},{"size":859,"mtime":1640313011987,"results":"35","hashOfConfig":"20"},{"size":1205,"mtime":1640309374268,"results":"36","hashOfConfig":"20"},{"size":1688,"mtime":1640721457488,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"11ksx1a",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},"/Users/haleyglavina/Desktop/code/checkers2/client/src/index.js",[],["80","81"],"/Users/haleyglavina/Desktop/code/checkers2/client/src/reportWebVitals.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/App.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/HomePage/HomePage.js",["82"],"import React, { useState, useEffect } from 'react';\nimport './HomePage.scss';\nimport Game from '../Game/Game';\nimport NavBar from '../NavBar/NavBar';\nimport ThemeContext from '../../utils/ThemeContext';\nimport styled from 'styled-components';\n\nconst MainContent = styled.main`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: calc(10px + 2vmin);\n  transition: all 0.3s ease-in-out;\n\n  background-color: ${(props) => props.theme === 'light' ? '#eeeeee' : '#282c34'};\n  color: ${(props) => props.theme === 'light' ? 'black' : 'white'};\n`;\n\nfunction HomePage(props) {\n\n  const [theme, setTheme] = useState(\"dark\");\n  const [sameScreen, setSameScreen] = useState(false); // are players playing on same screen?\n  const value = { theme, setTheme };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      <MainContent theme={theme}>\n        <NavBar sameScreen={sameScreen} setSameScreen={setSameScreen} />\n        <h1>Checkers</h1>\n        <Game sameScreen={sameScreen} />\n      </MainContent>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default HomePage;","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/NavBar/NavBar.js",["83","84"],"import React, { useContext, useState } from 'react';\nimport ThemeContext from '../../utils/ThemeContext';\nimport Toggle from '../Toggle/Toggle';\nimport { Nav } from './styles';\n\nfunction NavBar({ sameScreen, setSameScreen }) {\n\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  // for switching light/dark theme\n  const switchTheme = () => { \n    setTheme( (theme == 'light') ? 'dark' : 'light');\n  }\n\n  // for switching screens together/separate mode\n  const switchScreenMode = () => { \n    setSameScreen(!sameScreen);\n  }\n\n  return (\n    <Nav className=\"navbar\">\n      <p className=\"title\">Battle of da Browsers ðŸ”¥</p>\n      <Toggle toggleAction={switchTheme} \n              initialState={theme === 'dark'} \n              symbols = {['ðŸŒœ', 'ðŸŒž']}/>\n      <Toggle toggleAction={switchScreenMode} \n              initialState={false}\n              symbols = {['ðŸ‘¥', 'ðŸ‘¤']}/>\n    </Nav>\n  );\n}\n\nexport default NavBar;\n","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Game/Game.js",["85"],"/Users/haleyglavina/Desktop/code/checkers2/client/src/utils/ThemeContext.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/NavBar/styles.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Game/styles.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Toggle/Toggle.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Board/Board.js",["86","87","88"],"import React, { useEffect, useState } from 'react';\nimport { GameBoard } from './styles';\nimport Tile from '../Tile/Tile';\n// import { Component } from 'react';\nimport { resetBoard, getColor, moveChecker, checkForWin } from '../../utils/BoardFunctions';\nimport { emptyBoard, pawnCantMove, kingCantMove } from '../../utils/BoardTestSetup';\n\n// Number of tiles per row/column\nlet boardSize = 8;\n\nfunction Board({updateScore, game, score, sameScreen, playerView}) {\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  // const [boardWidth, setBoardWidth] = useState(0);\n\n  useEffect(() => {\n    // setTiles(resetBoard(boardSize));\n    // setTiles(emptyBoard(boardSize));\n    // setTiles(pawnCantMove());\n    setTiles(kingCantMove());\n  }, [])\n\n  // Check if a tile is currently focused\n  const isFocusTile = (coord) => {\n    if (!focusTile) \n      return false;\n\n    if ((focusTile[0] === coord[0]) && (focusTile[1] === coord[1]))\n      return true;\n  }\n\n  const tileClicked = (coord) => {\n    // if no tile is focused yet \n    // and this tile contains a checker\n    // and its this player's turn, focus this tile\n    let tile = tiles[(coord[0] * boardSize) + coord[1]];\n\n    if (!focusTile \n        && tile.hasChecker\n        && (((game.gameState === 'p1Turn') && (tile.hasChecker === 1)) \n            || ((game.gameState === 'p2Turn') && (tile.hasChecker === -1)))) {\n      setFocusTile(coord);\n    }\n      \n    // if no tile is focused yet and this tile doesn't contain checker, do nothing\n    else if (!focusTile && !tiles.hasChecker) {\n      return;\n    }\n\n    // if focus tile already exists, move checker from focus tile to this coord\n    else {\n      let {isValidMove, newTiles} = moveChecker(tiles, focusTile, coord, boardSize, updateScore);     \n      setFocusTile(null);\n\n      // If the move was valid, determine if player just won or switch the turn\n      if (isValidMove) {\n        setTiles(newTiles);\n        let newGameState = game.gameState;\n\n        let p1CheckersRemaining = newTiles.filter(tile => tile.hasChecker === 1).length;\n        let p2CheckersRemaining = newTiles.filter(tile => tile.hasChecker === -1).length;\n        console.log(\"p1 remaining:\", p1CheckersRemaining);\n        console.log(\"p2 remaining:\", p2CheckersRemaining);\n\n        // If the current player just eliminated the last of their opponent's checkers, current player wins\n        if (newGameState === 'p1Turn' & (p2CheckersRemaining === 0)) {\n          newGameState = 'p1Won';\n        } else if (newGameState === 'p2Turn' & (p1CheckersRemaining === 0)) {\n          newGameState = 'p2Won';\n        }\n\n        // If current player cannot make any moves they have lost\n        if ((newGameState === 'p1Turn') || (newGameState === 'p2Turn')) {\n          let winResult = checkForWin(newTiles, newGameState === 'p1Turn' ? 1 : -1, boardSize);\n          console.log(\"winResult received:\", winResult);\n          if (winResult[0])\n            newGameState = winResult[1] === 1 ? 'p1Won' : 'p2Won';\n        }\n\n        // If no player has won yet, switch turns\n        if (newGameState === 'p1Turn')\n          newGameState = 'p2Turn';\n        else if (newGameState === 'p2Turn')\n          newGameState = 'p1Turn';\n\n        console.log(\"changing game state to:\", newGameState);\n        game.setGameState(newGameState);\n      }\n    }\n  }\n\n  return (\n    <GameBoard boardSize={boardSize} playerView={sameScreen ? 1 : playerView}>\n      {tiles.map((tile, i) => {\n        return <Tile \n                key={i}\n                coord = {[tile.i, tile.j]}\n                color = {getColor([tile.i, tile.j])}\n                hasChecker = {tile.hasChecker}\n                isKing = {tile.king}\n                isFocusTile = {isFocusTile}\n                tileClicked = {tileClicked}\n                boardSize = {boardSize}\n               /> \n      })}\n    </GameBoard>\n  );\n}\n\nexport default Board;","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Score/Score.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Board/styles.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/utils/BoardFunctions.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Score/styles.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Tile/Tile.js",["89","90","91","92"],"import React, { useEffect, useState } from 'react';\nimport './Tile.scss';\nimport ieLogo from '../../assets/ieLogo.png';\nimport chromeLogo from '../../assets/chromeLogo.png';\nimport crown from '../../assets/crown.svg';\nimport { TileContainer, CheckerPiece } from './styles';\n\nfunction Tile({color, coord, isFocusTile, hasChecker, tileClicked, isKing, boardSize}) {\n\n  const toggleFocus = () => {\n    tileClicked(coord);\n  }\n\n  return (\n    <TileContainer \n        color={color} \n        isFocusTile={isFocusTile(coord)}\n        onClick={toggleFocus}\n        boardSize = {boardSize}\n    >\n      <p className=\"label\">{`${coord[0]}, ${coord[1]}`}</p> \n      {(hasChecker & isKing) ? <img className=\"crown\" src={crown} /> : ''}\n      {hasChecker ? <CheckerPiece src={hasChecker == 1 ? ieLogo : chromeLogo} /> : ''}\n    </TileContainer>\n  );\n}\n\nexport default Tile;","/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Tile/styles.js",[],"/Users/haleyglavina/Desktop/code/checkers2/client/src/utils/BoardTestSetup.js",["93"],"import { tileIndex } from './BoardFunctions';\n\n/*\n// Make pawn and king objects  \n*/\nconst makeP1Pawn = (i,j) => {\n  return {i, j, hasChecker: 1, king: false};\n}\n\nconst makeP2Pawn = (i,j) => {\n  return {i, j, hasChecker: -1, king: false};\n}\n\nconst makeP1King = (i,j) => {\n  return {i, j, hasChecker: 1, king: true};\n}\n\nconst makeP2King = (i,j) => {\n  return {i, j, hasChecker: -1, king: true};\n}\n\n/*\n// Define tiles with no checkers on them\n*/\nexport const emptyBoard = (boardSize) => {\n  let tile = []\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tile.push({i, j, hasChecker: null});\n    }\n  }\n  return tile;\n}\n\n/*\n// Define tiles where p1 pawns remain and cant move, so p2 wins\n// Assumes a boardSize of 8\n*/\nexport const pawnCantMove = (i, j) => {\n  let tiles = emptyBoard(8);\n\n  tiles[tileIndex(3,3,8)] = makeP1Pawn(3,3);\n  tiles[tileIndex(4,2,8)] = makeP2Pawn(4,2);\n  tiles[tileIndex(6,0,8)] = makeP2Pawn(6,0);\n  tiles[tileIndex(4,4,8)] = makeP2Pawn(4,4);\n  tiles[tileIndex(5,5,8)] = makeP2Pawn(5,5);\n\n  return tiles;\n}\n\n/*\n// Define tiles where p1 king remain and cant move, so p2 wins\n// Assumes a boardSize of 8\n*/\nexport const kingCantMove = (i, j) => {\n  let tiles = emptyBoard(8);\n\n  tiles[tileIndex(3,3,8)] = makeP1King(3,3);\n  tiles[tileIndex(4,2,8)] = makeP2Pawn(4,2);\n  tiles[tileIndex(6,0,8)] = makeP2Pawn(6,0);\n  tiles[tileIndex(4,4,8)] = makeP2Pawn(4,4);\n  tiles[tileIndex(5,5,8)] = makeP2Pawn(5,5);\n\n  tiles[tileIndex(2,2,8)] = makeP2Pawn(2,2);\n  tiles[tileIndex(2,4,8)] = makeP2Pawn(2,4);\n  tiles[tileIndex(4,4,8)] = makeP2Pawn(4,4);\n  tiles[tileIndex(5,5,8)] = makeP2Pawn(5,5);\n\n  return tiles;\n}",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":27,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"102","line":1,"column":29,"nodeType":"100","messageId":"101","endLine":1,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":12,"column":22,"nodeType":"105","messageId":"106","endLine":12,"endColumn":24},{"ruleId":null,"fatal":true,"severity":2,"message":"107","line":24,"column":9},{"ruleId":"98","severity":1,"message":"108","line":5,"column":10,"nodeType":"100","messageId":"101","endLine":5,"endColumn":20},{"ruleId":"98","severity":1,"message":"109","line":6,"column":10,"nodeType":"100","messageId":"101","endLine":6,"endColumn":20},{"ruleId":"98","severity":1,"message":"110","line":6,"column":22,"nodeType":"100","messageId":"101","endLine":6,"endColumn":34},{"ruleId":"98","severity":1,"message":"99","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},{"ruleId":"98","severity":1,"message":"102","line":1,"column":28,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"111","severity":1,"message":"112","line":22,"column":32,"nodeType":"113","endLine":22,"endColumn":69},{"ruleId":"103","severity":1,"message":"104","line":23,"column":51,"nodeType":"105","messageId":"106","endLine":23,"endColumn":53},{"ruleId":"98","severity":1,"message":"114","line":18,"column":7,"nodeType":"100","messageId":"101","endLine":18,"endColumn":17},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Parsing error: Identifier 'gameStateMsg' has already been declared.\n\n\u001b[0m \u001b[90m 22 |\u001b[39m   }\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 23 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 24 |\u001b[39m   \u001b[36mconst\u001b[39m gameStateMsg \u001b[33m=\u001b[39m (gameStateCode) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m     \u001b[36mif\u001b[39m (gameStateCode \u001b[33m===\u001b[39m \u001b[32m'p1Turn'\u001b[39m)\u001b[0m\n\u001b[0m \u001b[90m 26 |\u001b[39m       \u001b[36mreturn\u001b[39m \u001b[32m`It's ${p1Name}'s turn`\u001b[39m\u001b[33m;\u001b[39m \u001b[0m\n\u001b[0m \u001b[90m 27 |\u001b[39m     \u001b[36mif\u001b[39m (gameStateCode \u001b[33m===\u001b[39m \u001b[32m'p2Turn'\u001b[39m)\u001b[0m","'resetBoard' is defined but never used.","'emptyBoard' is defined but never used.","'pawnCantMove' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'makeP2King' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]