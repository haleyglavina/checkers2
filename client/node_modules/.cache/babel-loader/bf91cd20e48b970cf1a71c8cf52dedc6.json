{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Game/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Game.scss';\nimport Board from '../Board/Board';\nimport ieLogo from '../../assets/ieLogo.png';\nimport chromeLogo from '../../assets/chromeLogo.png';\nimport { GameContainer, Score } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0); // change score to 1 state of [#, #]\n\n  const [gameState, setGameState] = useState('p1Turn'); // gameState is either p1Turn, p2Turn, p1Won, p2Won\n\n  const [sameScreen, setSameScreen] = useState(true); // are players playing on same screen?\n\n  const [playerView, setPlayerView] = useState(-1); // which player's view should screen display if they're playing on different screens?\n\n  const gameStateMsg = {\n    'p1Turn': \"It's player 1's turn\",\n    'p2Turn': \"It's player 2's turn\",\n    'p1Won': \"Player 1 won!\",\n    'p2Won': \"Player 2 won!\"\n  };\n  const game = {\n    gameState,\n    setGameState\n  };\n\n  const updateScore = newScore => {\n    setScore1(score1 + newScore[0]);\n    setScore2(score2 + newScore[1]);\n  };\n\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      updateScore: updateScore,\n      game: game,\n      score: [score1, score2],\n      sameScreen: sameScreen,\n      playerView: playerView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Score, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"logo\",\n          src: chromeLogo,\n          alt: \"Player 1 logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"name\",\n          children: `Player 1: ${score1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"logo\",\n          src: ieLogo,\n          alt: \"Player 2 logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"name\",\n          children: `Player 2: ${score2}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: gameStateMsg[gameState]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"OSNdEsA6dkGlLM/BZKGUZ9Dj0kE=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Game/Game.js"],"names":["React","useEffect","useState","Board","ieLogo","chromeLogo","GameContainer","Score","Game","props","score1","setScore1","score2","setScore2","gameState","setGameState","sameScreen","setSameScreen","playerView","setPlayerView","gameStateMsg","game","updateScore","newScore"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAASC,aAAT,EAAwBC,KAAxB,QAAqC,UAArC;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAEnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,CAAD,CAApC,CAHmB,CAInB;;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,QAAD,CAA1C,CALmB,CAKmC;;AACtD,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,IAAD,CAA5C,CANmB,CAMiC;;AACpD,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,CAAC,CAAF,CAA5C,CAPmB,CAO+B;;AAElD,QAAMkB,YAAY,GAAG;AACnB,cAAU,sBADS;AAEnB,cAAU,sBAFS;AAGnB,aAAS,eAHU;AAInB,aAAS;AAJU,GAArB;AAOA,QAAMC,IAAI,GAAG;AAACP,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAAb;;AAEA,QAAMO,WAAW,GAAIC,QAAD,IAAc;AAChCZ,IAAAA,SAAS,CAACD,MAAM,GAAGa,QAAQ,CAAC,CAAD,CAAlB,CAAT;AACAV,IAAAA,SAAS,CAACD,MAAM,GAAGW,QAAQ,CAAC,CAAD,CAAlB,CAAT;AACD,GAHD;;AAKAtB,EAAAA,SAAS,CAAC,MAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,aAAD;AAAe,IAAA,SAAS,EAAC,MAAzB;AAAA,4BACI,QAAC,KAAD;AACE,MAAA,WAAW,EAAEqB,WADf;AAEE,MAAA,IAAI,EAAED,IAFR;AAGE,MAAA,KAAK,EAAE,CAACX,MAAD,EAASE,MAAT,CAHT;AAIE,MAAA,UAAU,EAAEI,UAJd;AAKE,MAAA,UAAU,EAAEE;AALd;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI,QAAC,KAAD;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,UAAA,GAAG,EAAEb,UAA3B;AAAuC,UAAA,GAAG,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAI,UAAA,SAAS,EAAC,MAAd;AAAA,oBAAuB,aAAYK,MAAO;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,UAAA,GAAG,EAAEN,MAA3B;AAAmC,UAAA,GAAG,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAI,UAAA,SAAS,EAAC,MAAd;AAAA,oBAAuB,aAAYQ,MAAO;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAWE;AAAA,kBAAIQ,YAAY,CAACN,SAAD;AAAhB;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GAlDQN,I;;KAAAA,I;AAoDT,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Game.scss';\nimport Board from '../Board/Board';\nimport ieLogo from '../../assets/ieLogo.png';\nimport chromeLogo from '../../assets/chromeLogo.png';\nimport { GameContainer, Score } from './styles';\n\nfunction Game(props) {\n\n  const [score1, setScore1] = useState(0);\n  const [score2, setScore2] = useState(0);\n  // change score to 1 state of [#, #]\n  const [gameState, setGameState] = useState('p1Turn'); // gameState is either p1Turn, p2Turn, p1Won, p2Won\n  const [sameScreen, setSameScreen] = useState(true); // are players playing on same screen?\n  const [playerView, setPlayerView] = useState(-1); // which player's view should screen display if they're playing on different screens?\n\n  const gameStateMsg = {\n    'p1Turn': \"It's player 1's turn\",\n    'p2Turn': \"It's player 2's turn\",\n    'p1Won': \"Player 1 won!\",\n    'p2Won': \"Player 2 won!\"\n  };\n\n  const game = {gameState, setGameState};\n\n  const updateScore = (newScore) => {\n    setScore1(score1 + newScore[0]);\n    setScore2(score2 + newScore[1]);\n  }\n\n  useEffect(() => {\n\n  }, []);\n\n  return (\n    <GameContainer className=\"game\">\n        <Board \n          updateScore={updateScore} \n          game={game} \n          score={[score1, score2]}\n          sameScreen={sameScreen}\n          playerView={playerView}/>\n        <Score>\n          <div className=\"player\">\n            <img className=\"logo\" src={chromeLogo} alt=\"Player 1 logo\"></img>\n            <h2 className=\"name\">{`Player 1: ${score1}`}</h2>\n            \n          </div>\n          <div className=\"player\">\n            <img className=\"logo\" src={ieLogo} alt=\"Player 2 logo\"></img>\n            <h2 className=\"name\">{`Player 2: ${score2}`}</h2>\n          </div>\n\n          <p>{gameStateMsg[gameState]}</p>\n        </Score>\n      </GameContainer>\n  );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}