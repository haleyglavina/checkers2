{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Tile/Tile.js\";\nimport React, { useEffect, useState } from 'react';\nimport './Tile.scss';\nimport ieLogo from '../../assets/ieLogo.png';\nimport chromeLogo from '../../assets/chromeLogo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile({\n  color,\n  coord,\n  isFocusTile,\n  setFocusTile,\n  hasChecker,\n  tileClicked\n}) {\n  // const [hasChecker, setHasChecker] = useState(hasChecker);\n  const toggleFocus = () => {\n    console.log(\"tile clicked:\", coord[0], coord[1]); // console.log(\"is this a focus tile?\", isFocusTile(coord));\n\n    console.log(\"hasChecker is: \", hasChecker); // if non-playing tile was clicked, remove focus\n\n    if (color) {\n      setFocusTile(null);\n      return;\n    }\n\n    tileClicked(coord); // isFocusTile(coord) ? setFocusTile(null) : setFocusTile(coord);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `tile \n                    ${color ? 'tile--light' : 'tile--dark'} \n                    ${isFocusTile(coord) ? 'tile--focus' : ''}`,\n    onClick: toggleFocus // onMouseDown = {startTileChosen}\n    // onMouseUp = {endTileChosen}\n    ,\n    children: hasChecker ? /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"tile__checker\",\n      src: hasChecker == 1 ? chromeLogo : ieLogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }, this) : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Tile/Tile.js"],"names":["React","useEffect","useState","ieLogo","chromeLogo","Tile","color","coord","isFocusTile","setFocusTile","hasChecker","tileClicked","toggleFocus","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA,KAAD;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,WAAf;AAA4BC,EAAAA,YAA5B;AAA0CC,EAAAA,UAA1C;AAAsDC,EAAAA;AAAtD,CAAd,EAAkF;AAEhF;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BP,KAAK,CAAC,CAAD,CAAlC,EAAuCA,KAAK,CAAC,CAAD,CAA5C,EADwB,CAExB;;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,UAA/B,EAHwB,CAKxB;;AACA,QAAIJ,KAAJ,EAAW;AACTG,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;AACD;;AAEDE,IAAAA,WAAW,CAACJ,KAAD,CAAX,CAXwB,CAYxB;AACD,GAbD;;AAeA,sBACE;AAAK,IAAA,SAAS,EAAG;AACrB,sBAAsBD,KAAK,GAAG,aAAH,GAAmB,YAAa;AAC3D,sBAAsBE,WAAW,CAACD,KAAD,CAAX,GAAqB,aAArB,GAAqC,EAAG,EAF1D;AAGI,IAAA,OAAO,EAAEK,WAHb,CAII;AACA;AALJ;AAAA,cAOGF,UAAU,gBAAG;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,GAAG,EAAEA,UAAU,IAAI,CAAd,GAAkBN,UAAlB,GAA+BD;AAAnE;AAAA;AAAA;AAAA;AAAA,YAAH,GAAuF;AAPpG;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;KA9BQE,I;AAgCT,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Tile.scss';\nimport ieLogo from '../../assets/ieLogo.png';\nimport chromeLogo from '../../assets/chromeLogo.png';\n\nfunction Tile({color, coord, isFocusTile, setFocusTile, hasChecker, tileClicked}) {\n\n  // const [hasChecker, setHasChecker] = useState(hasChecker);\n\n  const toggleFocus = () => {\n    console.log(\"tile clicked:\", coord[0], coord[1]);\n    // console.log(\"is this a focus tile?\", isFocusTile(coord));\n    console.log(\"hasChecker is: \", hasChecker);\n\n    // if non-playing tile was clicked, remove focus\n    if (color) {\n      setFocusTile(null);\n      return;\n    }\n\n    tileClicked(coord);\n    // isFocusTile(coord) ? setFocusTile(null) : setFocusTile(coord);\n  }\n\n  return (\n    <div className={`tile \n                    ${color ? 'tile--light' : 'tile--dark'} \n                    ${isFocusTile(coord) ? 'tile--focus' : ''}`}\n        onClick={toggleFocus}\n        // onMouseDown = {startTileChosen}\n        // onMouseUp = {endTileChosen}\n    >\n      {hasChecker ? <img className=\"tile__checker\" src={hasChecker == 1 ? chromeLogo : ieLogo}></img> : ''}\n    </div>\n  );\n}\n\nexport default Tile;"]},"metadata":{},"sourceType":"module"}