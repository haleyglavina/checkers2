{"ast":null,"code":"// Define tiles with no checkers on them\nexport const emptyBoard = boardSize => {\n  let tileLi = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tileLi.push({\n        i,\n        j,\n        hasChecker: null\n      });\n    }\n  }\n\n  return tileLi;\n}; // Define tiles with start of game checkers arrangement\n\nexport const resetBoard = boardSize => {\n  let tileLi = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      if (i <= 1 && !getColor([i, j])) tileLi.push({\n        i,\n        j,\n        hasChecker: 'chrome'\n      });else if (i >= 4 && !getColor([i, j])) tileLi.push({\n        i,\n        j,\n        hasChecker: 'IE'\n      });else tileLi.push({\n        i,\n        j,\n        hasChecker: ''\n      });\n    }\n  }\n\n  return tileLi;\n}; // Determines what color a tile will be\n\nexport const getColor = coord => {\n  let i = coord[0];\n  let j = coord[1];\n  if ((i % 2 == 0 && j % 2 == 0) | (i % 2 == 1 && j % 2 == 1)) return 0;\n  return 1;\n};","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/utils/BoardFunctions.js"],"names":["emptyBoard","boardSize","tileLi","i","j","push","hasChecker","resetBoard","getColor","coord"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,SAAD,IAAe;AACvC,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClC;AACAF,MAAAA,MAAM,CAACG,IAAP,CAAY;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAZ;AACD;AACF;;AACD,SAAOJ,MAAP;AACD,CATM,C,CAWP;;AACA,OAAO,MAAMK,UAAU,GAAIN,SAAD,IAAe;AACvC,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClC;AACA,UAAID,CAAC,IAAI,CAAL,IAAU,CAACK,QAAQ,CAAC,CAACL,CAAD,EAAIC,CAAJ,CAAD,CAAvB,EACEF,MAAM,CAACG,IAAP,CAAY;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAZ,EADF,KAGK,IAAIH,CAAC,IAAI,CAAL,IAAU,CAACK,QAAQ,CAAC,CAACL,CAAD,EAAIC,CAAJ,CAAD,CAAvB,EACHF,MAAM,CAACG,IAAP,CAAY;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAZ,EADG,KAIHJ,MAAM,CAACG,IAAP,CAAY;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAZ;AACH;AACF;;AACD,SAAOJ,MAAP;AACD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMM,QAAQ,GAAIC,KAAD,IAAW;AACjC,MAAIN,CAAC,GAAGM,KAAK,CAAC,CAAD,CAAb;AACA,MAAIL,CAAC,GAAGK,KAAK,CAAC,CAAD,CAAb;AAEA,MAAI,CAAEN,CAAC,GAAG,CAAJ,IAAS,CAAV,IAAiBC,CAAC,GAAG,CAAJ,IAAS,CAA3B,KAAmCD,CAAC,GAAG,CAAJ,IAAS,CAAV,IAAiBC,CAAC,GAAG,CAAJ,IAAS,CAA5D,CAAJ,EACE,OAAO,CAAP;AACF,SAAO,CAAP;AACD,CAPM","sourcesContent":["// Define tiles with no checkers on them\nexport const emptyBoard = (boardSize) => {\n  let tileLi = []\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tileLi.push({i, j, hasChecker: null});\n    }\n  }\n  return tileLi;\n}\n\n// Define tiles with start of game checkers arrangement\nexport const resetBoard = (boardSize) => {\n  let tileLi = []\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      if (i <= 1 && !getColor([i, j]))\n        tileLi.push({i, j, hasChecker: 'chrome'});\n      \n      else if (i >= 4 && !getColor([i, j])) \n        tileLi.push({i, j, hasChecker: 'IE'});\n      \n      else \n        tileLi.push({i, j, hasChecker: ''});\n    }\n  }\n  return tileLi;\n}\n\n// Determines what color a tile will be\nexport const getColor = (coord) => {\n  let i = coord[0]\n  let j = coord[1]\n\n  if (((i % 2 == 0) && (j % 2 == 0)) | ((i % 2 == 1) && (j % 2 == 1)))\n    return 0;\n  return 1;\n}"]},"metadata":{},"sourceType":"module"}