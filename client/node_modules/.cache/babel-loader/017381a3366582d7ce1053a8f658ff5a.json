{"ast":null,"code":"import { tileIndex } from './BoardFunctions';\n/*\n// Define tiles with no checkers on them\n*/\n\nexport const emptyBoard = boardSize => {\n  let tile = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tile.push({\n        i,\n        j,\n        hasChecker: null\n      });\n    }\n  }\n\n  return tile;\n};\n/*\n// Define tiles where p1 pawns remain and cant move, so p2 wins\n// Assumes a boardSize of 8\n*/\n\nexport const pawnCantMove = (i, j) => {\n  let tiles = emptyBoard(8);\n  tiles[tileIndex(3, 3, 8)] = makeP1Pawn(3, 3);\n  tiles[tileIndex(4, 2, 8)] = makeP2Pawn(4, 2);\n  tiles[tileIndex(5, 1, 8)] = makeP2Pawn(5, 1);\n  tiles[tileIndex(4, 4, 8)] = makeP2Pawn(4, 4);\n  tiles[tileIndex(5, 5, 8)] = makeP2Pawn(5, 5);\n  return tiles;\n};\n\nconst makeP1Pawn = (i, j) => {\n  return {\n    i,\n    j,\n    hasChecker: 1,\n    king: false\n  };\n};\n\nconst makeP2Pawn = (i, j) => {\n  return {\n    i,\n    j,\n    hasChecker: -1,\n    king: false\n  };\n};\n\nconst makeP1King = (i, j) => {\n  return {\n    i,\n    j,\n    hasChecker: 1,\n    king: true\n  };\n};\n\nconst makeP2King = (i, j) => {\n  return {\n    i,\n    j,\n    hasChecker: -1,\n    king: true\n  };\n};","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/client/src/utils/BoardTestSetup.js"],"names":["tileIndex","emptyBoard","boardSize","tile","i","j","push","hasChecker","pawnCantMove","tiles","makeP1Pawn","makeP2Pawn","king","makeP1King","makeP2King"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAIC,SAAD,IAAe;AACvC,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClC;AACAF,MAAAA,IAAI,CAACG,IAAL,CAAU;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAV;AACD;AACF;;AACD,SAAOJ,IAAP;AACD,CATM;AAWP;AACA;AACA;AACA;;AACA,OAAO,MAAMK,YAAY,GAAG,CAACJ,CAAD,EAAIC,CAAJ,KAAU;AACpC,MAAII,KAAK,GAAGR,UAAU,CAAC,CAAD,CAAtB;AAEAQ,EAAAA,KAAK,CAACT,SAAS,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV,CAAL,GAA0BU,UAAU,CAAC,CAAD,EAAG,CAAH,CAApC;AACAD,EAAAA,KAAK,CAACT,SAAS,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV,CAAL,GAA0BW,UAAU,CAAC,CAAD,EAAG,CAAH,CAApC;AACAF,EAAAA,KAAK,CAACT,SAAS,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV,CAAL,GAA0BW,UAAU,CAAC,CAAD,EAAG,CAAH,CAApC;AACAF,EAAAA,KAAK,CAACT,SAAS,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV,CAAL,GAA0BW,UAAU,CAAC,CAAD,EAAG,CAAH,CAApC;AACAF,EAAAA,KAAK,CAACT,SAAS,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAV,CAAL,GAA0BW,UAAU,CAAC,CAAD,EAAG,CAAH,CAApC;AAEA,SAAOF,KAAP;AACD,CAVM;;AAYP,MAAMC,UAAU,GAAG,CAACN,CAAD,EAAGC,CAAH,KAAS;AAC1B,SAAO;AAACD,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOE,IAAAA,UAAU,EAAE,CAAnB;AAAsBK,IAAAA,IAAI,EAAE;AAA5B,GAAP;AACD,CAFD;;AAIA,MAAMD,UAAU,GAAG,CAACP,CAAD,EAAGC,CAAH,KAAS;AAC1B,SAAO;AAACD,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOE,IAAAA,UAAU,EAAE,CAAC,CAApB;AAAuBK,IAAAA,IAAI,EAAE;AAA7B,GAAP;AACD,CAFD;;AAIA,MAAMC,UAAU,GAAG,CAACT,CAAD,EAAGC,CAAH,KAAS;AAC1B,SAAO;AAACD,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOE,IAAAA,UAAU,EAAE,CAAnB;AAAsBK,IAAAA,IAAI,EAAE;AAA5B,GAAP;AACD,CAFD;;AAIA,MAAME,UAAU,GAAG,CAACV,CAAD,EAAGC,CAAH,KAAS;AAC1B,SAAO;AAACD,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOE,IAAAA,UAAU,EAAE,CAAC,CAApB;AAAuBK,IAAAA,IAAI,EAAE;AAA7B,GAAP;AACD,CAFD","sourcesContent":["import { tileIndex } from './BoardFunctions';\n\n/*\n// Define tiles with no checkers on them\n*/\nexport const emptyBoard = (boardSize) => {\n  let tile = []\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tile.push({i, j, hasChecker: null});\n    }\n  }\n  return tile;\n}\n\n/*\n// Define tiles where p1 pawns remain and cant move, so p2 wins\n// Assumes a boardSize of 8\n*/\nexport const pawnCantMove = (i, j) => {\n  let tiles = emptyBoard(8);\n\n  tiles[tileIndex(3,3,8)] = makeP1Pawn(3,3);\n  tiles[tileIndex(4,2,8)] = makeP2Pawn(4,2);\n  tiles[tileIndex(5,1,8)] = makeP2Pawn(5,1);\n  tiles[tileIndex(4,4,8)] = makeP2Pawn(4,4);\n  tiles[tileIndex(5,5,8)] = makeP2Pawn(5,5);\n\n  return tiles;\n}\n\nconst makeP1Pawn = (i,j) => {\n  return {i, j, hasChecker: 1, king: false};\n}\n\nconst makeP2Pawn = (i,j) => {\n  return {i, j, hasChecker: -1, king: false};\n}\n\nconst makeP1King = (i,j) => {\n  return {i, j, hasChecker: 1, king: true};\n}\n\nconst makeP2King = (i,j) => {\n  return {i, j, hasChecker: -1, king: true};\n}"]},"metadata":{},"sourceType":"module"}