{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Board/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { GameBoard } from './styles';\nimport Tile from '../Tile/Tile'; // import { Component } from 'react';\n\nimport { resetBoard, getColor, moveChecker, checkForWin } from '../../utils/BoardFunctions';\nimport { emptyBoard, pawnCantMove } from '../../utils/BoardTestSetup'; // Number of tiles per row/column\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardSize = 8;\n\nfunction Board({\n  updateScore,\n  game,\n  score,\n  sameScreen,\n  playerView\n}) {\n  _s();\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  const maxPoints = 12; // Change this to a function of boardSize !\n  // const [boardWidth, setBoardWidth] = useState(0);\n\n  useEffect(() => {\n    // setTiles(resetBoard(boardSize));\n    // setTiles(emptyBoard(boardSize));\n    // setTiles(pawnCantMove());\n    setTiles(kingCantMove());\n  }, []); // Check if a tile is currently focused\n\n  const isFocusTile = coord => {\n    if (!focusTile) return false;\n    if (focusTile[0] === coord[0] && focusTile[1] === coord[1]) return true;\n  };\n\n  const tileClicked = coord => {\n    // if no tile is focused yet \n    // and this tile contains a checker\n    // and its this player's turn, focus this tile\n    let tile = tiles[coord[0] * boardSize + coord[1]];\n\n    if (!focusTile && tile.hasChecker && (game.gameState === 'p1Turn' && tile.hasChecker === 1 || game.gameState === 'p2Turn' && tile.hasChecker === -1)) {\n      setFocusTile(coord);\n    } // if no tile is focused yet and this tile doesn't contain checker, do nothing\n    else if (!focusTile && !tiles.hasChecker) {\n      return;\n    } // if focus tile already exists, move checker from focus tile to this coord\n    else {\n      let {\n        isValidMove,\n        newTiles\n      } = moveChecker(tiles, focusTile, coord, boardSize, updateScore);\n      setFocusTile(null); // If the move was valid, determine if player just won or switch the turn\n\n      if (isValidMove) {\n        setTiles(newTiles);\n        let newGameState = game.gameState;\n\n        if (game.gameState === 'p1Turn') {\n          if (score[0] >= maxPoints) newGameState = 'p1Won';\n          newGameState = 'p2Turn';\n        } else {\n          if (score[1] >= maxPoints) newGameState = 'p2Won';\n          newGameState = 'p1Turn';\n        } // Check if current player cannot make any move. If so, current player has lost\n\n\n        if (game.gameState === 'p1Turn' || game.gameState === 'p2Turn') {\n          let winResult = checkForWin(newTiles, game.gameState === 'p1Turn' ? 1 : -1);\n          console.log(\"winResult received:\", winResult);\n          if (winResult[0]) newGameState = winResult[1] === 1 ? 'p1Won' : 'p2Won';\n        }\n\n        console.log(\"changing game state to:\", newGameState);\n        game.setGameState(newGameState);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameBoard, {\n    boardSize: boardSize,\n    playerView: sameScreen ? 1 : playerView,\n    children: tiles.map((tile, i) => {\n      return /*#__PURE__*/_jsxDEV(Tile, {\n        coord: [tile.i, tile.j],\n        color: getColor([tile.i, tile.j]),\n        hasChecker: tile.hasChecker,\n        isKing: tile.king,\n        isFocusTile: isFocusTile,\n        tileClicked: tileClicked,\n        boardSize: boardSize\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"RVNhLTZWQgaiczGYJI+Vp+xKop4=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Board/Board.js"],"names":["React","useEffect","useState","GameBoard","Tile","resetBoard","getColor","moveChecker","checkForWin","emptyBoard","pawnCantMove","boardSize","Board","updateScore","game","score","sameScreen","playerView","focusTile","setFocusTile","tiles","setTiles","maxPoints","kingCantMove","isFocusTile","coord","tileClicked","tile","hasChecker","gameState","isValidMove","newTiles","newGameState","winResult","console","log","setGameState","map","i","j","king"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GameBoard } from './styles';\nimport Tile from '../Tile/Tile';\n// import { Component } from 'react';\nimport { resetBoard, getColor, moveChecker, checkForWin } from '../../utils/BoardFunctions';\nimport { emptyBoard, pawnCantMove } from '../../utils/BoardTestSetup';\n\n// Number of tiles per row/column\nlet boardSize = 8;\n\nfunction Board({updateScore, game, score, sameScreen, playerView}) {\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  const maxPoints = 12; // Change this to a function of boardSize !\n  // const [boardWidth, setBoardWidth] = useState(0);\n\n  useEffect(() => {\n    // setTiles(resetBoard(boardSize));\n    // setTiles(emptyBoard(boardSize));\n    // setTiles(pawnCantMove());\n    setTiles(kingCantMove());\n  }, [])\n\n  // Check if a tile is currently focused\n  const isFocusTile = (coord) => {\n    if (!focusTile) \n      return false;\n\n    if ((focusTile[0] === coord[0]) && (focusTile[1] === coord[1]))\n      return true;\n  }\n\n  const tileClicked = (coord) => {\n    // if no tile is focused yet \n    // and this tile contains a checker\n    // and its this player's turn, focus this tile\n    let tile = tiles[(coord[0] * boardSize) + coord[1]];\n\n    if (!focusTile \n        && tile.hasChecker\n        && (((game.gameState === 'p1Turn') && (tile.hasChecker === 1)) \n            || ((game.gameState === 'p2Turn') && (tile.hasChecker === -1)))) {\n      setFocusTile(coord);\n    }\n      \n    // if no tile is focused yet and this tile doesn't contain checker, do nothing\n    else if (!focusTile && !tiles.hasChecker) {\n      return;\n    }\n\n    // if focus tile already exists, move checker from focus tile to this coord\n    else {\n      let {isValidMove, newTiles} = moveChecker(tiles, focusTile, coord, boardSize, updateScore);     \n      setFocusTile(null);\n\n      // If the move was valid, determine if player just won or switch the turn\n      if (isValidMove) {\n        setTiles(newTiles);\n        let newGameState = game.gameState;\n\n        if (game.gameState === 'p1Turn') {\n          if (score[0] >= maxPoints)\n            newGameState = 'p1Won';\n          newGameState = 'p2Turn';\n        } else {\n          if (score[1] >= maxPoints)\n            newGameState = 'p2Won';\n          newGameState = 'p1Turn';\n        }\n\n        // Check if current player cannot make any move. If so, current player has lost\n        if ((game.gameState === 'p1Turn') || (game.gameState === 'p2Turn')) {\n          let winResult = checkForWin(newTiles, game.gameState === 'p1Turn' ? 1 : -1);\n          console.log(\"winResult received:\", winResult);\n          if (winResult[0])\n            newGameState = winResult[1] === 1 ? 'p1Won' : 'p2Won';\n        }\n\n        console.log(\"changing game state to:\", newGameState);\n        game.setGameState(newGameState);\n      }\n    }\n  }\n\n  return (\n    <GameBoard boardSize={boardSize} playerView={sameScreen ? 1 : playerView}>\n      {tiles.map((tile, i) => {\n        return <Tile \n                key={i}\n                coord = {[tile.i, tile.j]}\n                color = {getColor([tile.i, tile.j])}\n                hasChecker = {tile.hasChecker}\n                isKing = {tile.king}\n                isFocusTile = {isFocusTile}\n                tileClicked = {tileClicked}\n                boardSize = {boardSize}\n               /> \n      })}\n    </GameBoard>\n  );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}