{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Board.css';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardSize = 6;\nlet tiles = [];\n\nfor (let i = 0; i < boardSize; i++) {\n  for (let j = 0; j < boardSize; j++) {\n    tiles.push([i, j]);\n  }\n}\n\nfunction Board(props) {\n  _s();\n\n  const [focusTile, setFocusTile] = useState(null); // Check if a tile is currently focused\n\n  const isFocusTile = coord => {\n    if (!focusTile) return false;\n    if (focusTile[0] == coord[0] && focusTile[1] == coord[1]) return true;\n  }; // Determines what color a tile will be\n\n\n  const getColor = coord => {\n    let i = coord[0];\n    let j = coord[1];\n    if ((i % 2 == 0 && j % 2 == 0) | (i % 2 == 1 && j % 2 == 1)) return 0;\n    return 1;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: tiles.map(coord => {\n      return /*#__PURE__*/_jsxDEV(Tile, {\n        x: coord[0],\n        y: coord[1],\n        color: getColor(coord)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"t6j7rlGsnJn1VziuO/r56etNIpQ=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js"],"names":["React","useEffect","useState","Tile","Component","boardSize","tiles","i","j","push","Board","props","focusTile","setFocusTile","isFocusTile","coord","getColor","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,IAAIC,SAAS,GAAG,CAAhB;AACA,IAAIC,KAAK,GAAG,EAAZ;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClCF,IAAAA,KAAK,CAACG,IAAN,CAAW,CAACF,CAAD,EAAIC,CAAJ,CAAX;AACD;AACF;;AAED,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAEpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,IAAD,CAA1C,CAFoB,CAIpB;;AACA,QAAMY,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAI,CAACH,SAAL,EACE,OAAO,KAAP;AAEF,QAAKA,SAAS,CAAC,CAAD,CAAT,IAAgBG,KAAK,CAAC,CAAD,CAAtB,IAA+BH,SAAS,CAAC,CAAD,CAAT,IAAgBG,KAAK,CAAC,CAAD,CAAxD,EACE,OAAO,IAAP;AAEH,GAPD,CALoB,CAcpB;;;AACA,QAAMC,QAAQ,GAAID,KAAD,IAAW;AAC1B,QAAIR,CAAC,GAAGQ,KAAK,CAAC,CAAD,CAAb;AACA,QAAIP,CAAC,GAAGO,KAAK,CAAC,CAAD,CAAb;AAEA,QAAI,CAAER,CAAC,GAAG,CAAJ,IAAS,CAAV,IAAiBC,CAAC,GAAG,CAAJ,IAAS,CAA3B,KAAmCD,CAAC,GAAG,CAAJ,IAAS,CAAV,IAAiBC,CAAC,GAAG,CAAJ,IAAS,CAA5D,CAAJ,EACE,OAAO,CAAP;AACF,WAAO,CAAP;AACD,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACGF,KAAK,CAACW,GAAN,CAAUF,KAAK,IAAI;AAClB,0BAAO,QAAC,IAAD;AAAM,QAAA,CAAC,EAAEA,KAAK,CAAC,CAAD,CAAd;AAAmB,QAAA,CAAC,EAAEA,KAAK,CAAC,CAAD,CAA3B;AAAgC,QAAA,KAAK,EAAEC,QAAQ,CAACD,KAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA/BQL,K;;KAAAA,K;AAiCT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Board.css';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\n\nlet boardSize = 6;\nlet tiles = []\nfor (let i = 0; i < boardSize; i++) {\n  for (let j = 0; j < boardSize; j++) {\n    tiles.push([i, j]);\n  }\n}\n\nfunction Board(props) {\n\n  const [focusTile, setFocusTile] = useState(null);\n\n  // Check if a tile is currently focused\n  const isFocusTile = (coord) => {\n    if (!focusTile) \n      return false;\n\n    if ((focusTile[0] == coord[0]) && (focusTile[1] == coord[1]))\n      return true;\n    \n  }\n\n  // Determines what color a tile will be\n  const getColor = (coord) => {\n    let i = coord[0]\n    let j = coord[1]\n\n    if (((i % 2 == 0) && (j % 2 == 0)) | ((i % 2 == 1) && (j % 2 == 1)))\n      return 0;\n    return 1;\n  }\n\n  return (\n    <div className=\"board\">\n      {tiles.map(coord => {\n        return <Tile x={coord[0]} y={coord[1]} color={getColor(coord)}/> \n      })}\n    </div>\n  );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}