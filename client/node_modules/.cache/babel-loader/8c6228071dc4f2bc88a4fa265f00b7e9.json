{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardSize = 6;\n\nfunction Board(props) {\n  _s();\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]); // Define tiles with no checkers on them\n\n  const emptyBoard = () => {\n    let tileLi = [];\n\n    for (let i = 0; i < boardSize; i++) {\n      for (let j = 0; j < boardSize; j++) {\n        // [x, y, hasChecker]\n        tileLi.push({\n          i,\n          j,\n          hasChecker: null\n        });\n      }\n    }\n\n    setTiles(tileLi);\n  }; // Define tiles with start of game checkers arrangement\n\n\n  const resetBoard = () => {\n    let tileLi = [];\n\n    for (let i = 0; i < boardSize; i++) {\n      for (let j = 0; j < boardSize; j++) {\n        // [x, y, hasChecker]\n        if (!getColor([i, j])) tileLi.push({\n          i,\n          j,\n          hasChecker: null\n        });else if (i <= 1) tileLi.push({\n          i,\n          j,\n          hasChecker: 'chrome'\n        });else if (i >= 4) tileLi.push({\n          i,\n          j,\n          hasChecker: 'IE'\n        });\n      }\n    }\n\n    console.log(\"set tiles\");\n    setTiles([...tileLi]);\n  };\n\n  useEffect(() => {\n    console.log(\"hi\");\n    resetBoard();\n  }, []);\n  useEffect(() => {\n    console.log(\"updated\");\n  }); // Check if a tile is currently focused\n\n  const isFocusTile = coord => {\n    if (!focusTile) return false;\n    if (focusTile[0] == coord[0] && focusTile[1] == coord[1]) return true;\n  }; // Determines what color a tile will be\n\n\n  const getColor = coord => {\n    console.log(\"coord in getColor:\", coord);\n    let i = coord[0];\n    let j = coord[1];\n    if ((i % 2 == 0 && j % 2 == 0) | (i % 2 == 1 && j % 2 == 1)) return 0;\n    return 1;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: tiles.map((tile, i) => {\n      return /*#__PURE__*/_jsxDEV(Tile, {\n        coord: [tile.i, tile.j],\n        color: getColor([tile.i, tile.j]),\n        hasChecker: tile.hasChecker,\n        isFocusTile: isFocusTile,\n        setFocusTile: setFocusTile\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"tVYNUwbJoTGcNDkZeLkzMPDLM5E=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js"],"names":["React","useEffect","useState","Tile","Component","boardSize","Board","props","focusTile","setFocusTile","tiles","setTiles","emptyBoard","tileLi","i","j","push","hasChecker","resetBoard","getColor","console","log","isFocusTile","coord","map","tile"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\n\nlet boardSize = 6;\n\nfunction Board(props) {\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([])\n\n  // Define tiles with no checkers on them\n  const emptyBoard = () => {\n    let tileLi = []\n    for (let i = 0; i < boardSize; i++) {\n      for (let j = 0; j < boardSize; j++) {\n        // [x, y, hasChecker]\n        tileLi.push({i, j, hasChecker: null});\n      }\n    }\n    setTiles(tileLi);\n  }\n  \n  // Define tiles with start of game checkers arrangement\n  const resetBoard = () => {\n    let tileLi = []\n    for (let i = 0; i < boardSize; i++) {\n      for (let j = 0; j < boardSize; j++) {\n        // [x, y, hasChecker]\n        if (!getColor([i, j]))\n          tileLi.push({i, j, hasChecker: null});\n\n        else if (i <= 1)\n          tileLi.push({i, j, hasChecker: 'chrome'});\n\n        else if (i >= 4)\n        tileLi.push({i, j, hasChecker: 'IE'});\n      }\n    }\n      console.log(\"set tiles\");\n      setTiles([...tileLi]);\n  }\n\n  useEffect(() => {\n    console.log(\"hi\");\n    resetBoard();\n  }, [])\n\n  useEffect(() => {\n    console.log(\"updated\");\n  })\n\n  // Check if a tile is currently focused\n  const isFocusTile = (coord) => {\n    if (!focusTile) \n      return false;\n\n    if ((focusTile[0] == coord[0]) && (focusTile[1] == coord[1]))\n      return true;\n  }\n\n  // Determines what color a tile will be\n  const getColor = (coord) => {\n    console.log(\"coord in getColor:\", coord)\n    let i = coord[0]\n    let j = coord[1]\n\n    if (((i % 2 == 0) && (j % 2 == 0)) | ((i % 2 == 1) && (j % 2 == 1)))\n      return 0;\n    return 1;\n  }\n\n  return (\n    <div className=\"board\">\n      {tiles.map((tile, i) => {\n        return <Tile \n                key={i}\n                coord = {[tile.i, tile.j]}\n                color = {getColor([tile.i, tile.j])}\n                hasChecker = {tile.hasChecker}\n                isFocusTile = {isFocusTile}\n                setFocusTile = {setFocusTile}\n               /> \n      })}\n    </div>\n  );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}