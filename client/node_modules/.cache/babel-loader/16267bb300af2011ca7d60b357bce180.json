{"ast":null,"code":"// Define tiles with no checkers on them\nexport const emptyBoard = boardSize => {\n  let tile = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tile.push({\n        i,\n        j,\n        hasChecker: null\n      });\n    }\n  }\n\n  return tile;\n}; // Define tiles with start of game checkers arrangement\n\nexport const resetBoard = boardSize => {\n  let tile = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      if (i <= boardSize / 3 && !getColor([i, j])) tile.push({\n        i,\n        j,\n        hasChecker: 1\n      });else if (i >= 4 && !getColor([i, j])) tile.push({\n        i,\n        j,\n        hasChecker: 2\n      });else tile.push({\n        i,\n        j,\n        hasChecker: null\n      });\n    }\n  }\n\n  return tile;\n}; // Determines what color a tile will be\n\nexport const getColor = coord => {\n  let i = coord[0];\n  let j = coord[1];\n  if ((i % 2 == 0 && j % 2 == 0) | (i % 2 == 1 && j % 2 == 1)) return 0;\n  return 1;\n}; // Moves a checker from oldCoord to newCoord, returns updated tiles array\n\nexport const moveChecker = (tiles, oldCoord, newCoord, boardSize) => {\n  tiles[newCoord[0] * boardSize + newCoord[1]] = tiles[oldCoord[0] * boardSize + oldCoord[1]];\n  tiles[oldCoord[0] * boardSize + oldCoord[1]] = {\n    i: oldCoord[0],\n    j: oldCoord[1],\n    hasChecker: null\n  };\n  return tiles;\n};","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/utils/BoardFunctions.js"],"names":["emptyBoard","boardSize","tile","i","j","push","hasChecker","resetBoard","getColor","coord","moveChecker","tiles","oldCoord","newCoord"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAIC,SAAD,IAAe;AACvC,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClC;AACAF,MAAAA,IAAI,CAACG,IAAL,CAAU;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAV;AACD;AACF;;AACD,SAAOJ,IAAP;AACD,CATM,C,CAWP;;AACA,OAAO,MAAMK,UAAU,GAAIN,SAAD,IAAe;AACvC,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClC;AACA,UAAID,CAAC,IAAKF,SAAS,GAAG,CAAlB,IAAwB,CAACO,QAAQ,CAAC,CAACL,CAAD,EAAIC,CAAJ,CAAD,CAArC,EACEF,IAAI,CAACG,IAAL,CAAU;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAV,EADF,KAGK,IAAIH,CAAC,IAAI,CAAL,IAAU,CAACK,QAAQ,CAAC,CAACL,CAAD,EAAIC,CAAJ,CAAD,CAAvB,EACHF,IAAI,CAACG,IAAL,CAAU;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAV,EADG,KAIHJ,IAAI,CAACG,IAAL,CAAU;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAV;AACH;AACF;;AACD,SAAOJ,IAAP;AACD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMM,QAAQ,GAAIC,KAAD,IAAW;AACjC,MAAIN,CAAC,GAAGM,KAAK,CAAC,CAAD,CAAb;AACA,MAAIL,CAAC,GAAGK,KAAK,CAAC,CAAD,CAAb;AAEA,MAAI,CAAEN,CAAC,GAAG,CAAJ,IAAS,CAAV,IAAiBC,CAAC,GAAG,CAAJ,IAAS,CAA3B,KAAmCD,CAAC,GAAG,CAAJ,IAAS,CAAV,IAAiBC,CAAC,GAAG,CAAJ,IAAS,CAA5D,CAAJ,EACE,OAAO,CAAP;AACF,SAAO,CAAP;AACD,CAPM,C,CASP;;AACA,OAAO,MAAMM,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4BZ,SAA5B,KAA0C;AACnEU,EAAAA,KAAK,CAAEE,QAAQ,CAAC,CAAD,CAAR,GAAcZ,SAAf,GAA4BY,QAAQ,CAAC,CAAD,CAArC,CAAL,GAAiDF,KAAK,CAAEC,QAAQ,CAAC,CAAD,CAAR,GAAcX,SAAf,GAA4BW,QAAQ,CAAC,CAAD,CAArC,CAAtD;AACAD,EAAAA,KAAK,CAAEC,QAAQ,CAAC,CAAD,CAAR,GAAcX,SAAf,GAA4BW,QAAQ,CAAC,CAAD,CAArC,CAAL,GAAiD;AAACT,IAAAA,CAAC,EAAES,QAAQ,CAAC,CAAD,CAAZ;AAAiBR,IAAAA,CAAC,EAAEQ,QAAQ,CAAC,CAAD,CAA5B;AAAiCN,IAAAA,UAAU,EAAE;AAA7C,GAAjD;AAEA,SAAOK,KAAP;AACD,CALM","sourcesContent":["// Define tiles with no checkers on them\nexport const emptyBoard = (boardSize) => {\n  let tile = []\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tile.push({i, j, hasChecker: null});\n    }\n  }\n  return tile;\n}\n\n// Define tiles with start of game checkers arrangement\nexport const resetBoard = (boardSize) => {\n  let tile = []\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      if (i <= (boardSize / 3) && !getColor([i, j]))\n        tile.push({i, j, hasChecker: 1});\n      \n      else if (i >= 4 && !getColor([i, j])) \n        tile.push({i, j, hasChecker: 2});\n      \n      else \n        tile.push({i, j, hasChecker: null});\n    }\n  }\n  return tile;\n}\n\n// Determines what color a tile will be\nexport const getColor = (coord) => {\n  let i = coord[0]\n  let j = coord[1]\n\n  if (((i % 2 == 0) && (j % 2 == 0)) | ((i % 2 == 1) && (j % 2 == 1)))\n    return 0;\n  return 1;\n}\n\n// Moves a checker from oldCoord to newCoord, returns updated tiles array\nexport const moveChecker = (tiles, oldCoord, newCoord, boardSize) => {\n  tiles[(newCoord[0] * boardSize) + newCoord[1]] = tiles[(oldCoord[0] * boardSize) + oldCoord[1]];\n  tiles[(oldCoord[0] * boardSize) + oldCoord[1]] = {i: oldCoord[0], j: oldCoord[1], hasChecker: null};\n\n  return tiles;\n}"]},"metadata":{},"sourceType":"module"}