{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Game/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Board from '../Board/Board';\nimport { GameContainer } from './styles';\nimport Score from '../Score/Score';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game({\n  sameScreen\n}) {\n  _s();\n\n  const [score, setScore] = useState([0, 0]);\n  const [gameState, setGameState] = useState('p1Turn'); // gameState is either p1Turn, p2Turn, p1Won, p2Won\n\n  const [playerView, setPlayerView] = useState(-1); // which player's view should screen display if they're playing on different screens?\n\n  const gameStateMsg = {\n    'p1Turn': \"It's player 1's turn\",\n    'p2Turn': \"It's player 2's turn\",\n    'p1Won': \"Player 1 won!\",\n    'p2Won': \"Player 2 won!\"\n  };\n  const game = {\n    gameState,\n    setGameState\n  };\n\n  const updateScore = newScore => {\n    setScore([score[0] + newScore[0], score[1] + newScore[1]]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameContainer, {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      updateScore: updateScore,\n      game: game,\n      score: score,\n      sameScreen: sameScreen,\n      playerView: playerView\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Score, {\n        score: score,\n        sameScreen: sameScreen,\n        playerView: playerView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: gameStateMsg[gameState]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"pQQ6K1DqEhDoiP5mAX3pBbmvXrA=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/client/src/components/Game/Game.js"],"names":["React","useEffect","useState","Board","GameContainer","Score","Game","sameScreen","score","setScore","gameState","setGameState","playerView","setPlayerView","gameStateMsg","game","updateScore","newScore"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA8B;AAAA;;AAE5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAAlC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,QAAD,CAA1C,CAH4B,CAG0B;;AAEtD,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAC,CAAF,CAA5C,CAL4B,CAKsB;;AAElD,QAAMY,YAAY,GAAG;AACnB,cAAU,sBADS;AAEnB,cAAU,sBAFS;AAGnB,aAAS,eAHU;AAInB,aAAS;AAJU,GAArB;AAOA,QAAMC,IAAI,GAAG;AAACL,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAAb;;AAEA,QAAMK,WAAW,GAAIC,QAAD,IAAc;AAChCR,IAAAA,QAAQ,CAAC,CAACD,KAAK,CAAC,CAAD,CAAL,GAAWS,QAAQ,CAAC,CAAD,CAApB,EAAyBT,KAAK,CAAC,CAAD,CAAL,GAAWS,QAAQ,CAAC,CAAD,CAA5C,CAAD,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,aAAD;AAAe,IAAA,SAAS,EAAC,MAAzB;AAAA,4BACI,QAAC,KAAD;AACE,MAAA,WAAW,EAAED,WADf;AAEE,MAAA,IAAI,EAAED,IAFR;AAGE,MAAA,KAAK,EAAEP,KAHT;AAIE,MAAA,UAAU,EAAED,UAJd;AAKE,MAAA,UAAU,EAAEK;AALd;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,KAAK,EAAEJ,KADT;AAEE,QAAA,UAAU,EAAED,UAFd;AAGE,QAAA,UAAU,EAAEK;AAHd;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAA,kBAAIE,YAAY,CAACJ,SAAD;AAAhB;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAtCQJ,I;;KAAAA,I;AAwCT,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Board from '../Board/Board';\nimport { GameContainer } from './styles';\nimport Score from '../Score/Score';\n\nfunction Game({ sameScreen }) {\n\n  const [score, setScore] = useState([0,0]);\n  const [gameState, setGameState] = useState('p1Turn'); // gameState is either p1Turn, p2Turn, p1Won, p2Won\n  \n  const [playerView, setPlayerView] = useState(-1); // which player's view should screen display if they're playing on different screens?\n\n  const gameStateMsg = {\n    'p1Turn': \"It's player 1's turn\",\n    'p2Turn': \"It's player 2's turn\",\n    'p1Won': \"Player 1 won!\",\n    'p2Won': \"Player 2 won!\"\n  };\n\n  const game = {gameState, setGameState};\n\n  const updateScore = (newScore) => {\n    setScore([score[0] + newScore[0], score[1] + newScore[1]]);\n  }\n\n  return (\n    <GameContainer className=\"game\">\n        <Board \n          updateScore={updateScore} \n          game={game} \n          score={score}\n          sameScreen={sameScreen}\n          playerView={playerView}/>\n        <div>\n          <Score \n            score={score}\n            sameScreen={sameScreen}\n            playerView={playerView}>\n          </Score>\n          <p>{gameStateMsg[gameState]}</p>\n        </div>\n      </GameContainer>\n  );\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}