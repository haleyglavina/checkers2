{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { emptyBoard, resetBoard } from '../../utils/BoardFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardSize = 6;\n\nfunction Board(props) {\n  _s();\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  useEffect(() => {\n    console.log(\"hi\");\n    setTiles(resetBoard(boardSize));\n  }, []);\n  useEffect(() => {\n    console.log(\"updated\");\n  }); // Check if a tile is currently focused\n\n  const isFocusTile = coord => {\n    if (!focusTile) return false;\n    if (focusTile[0] == coord[0] && focusTile[1] == coord[1]) return true;\n  }; // // Determines what color a tile will be\n  // const getColor = (coord) => {\n  //   console.log(\"coord in getColor:\", coord)\n  //   let i = coord[0]\n  //   let j = coord[1]\n  //   if (((i % 2 == 0) && (j % 2 == 0)) | ((i % 2 == 1) && (j % 2 == 1)))\n  //     return 0;\n  //   return 1;\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: tiles.map((tile, i) => {\n      return /*#__PURE__*/_jsxDEV(Tile, {\n        coord: [tile.i, tile.j],\n        hasChecker: tile.hasChecker,\n        isFocusTile: isFocusTile,\n        setFocusTile: setFocusTile\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"tVYNUwbJoTGcNDkZeLkzMPDLM5E=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js"],"names":["React","useEffect","useState","Tile","Component","emptyBoard","resetBoard","boardSize","Board","props","focusTile","setFocusTile","tiles","setTiles","console","log","isFocusTile","coord","map","tile","i","j","hasChecker"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,4BAAvC;;AAEA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAEpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAF,IAAAA,QAAQ,CAACP,UAAU,CAACC,SAAD,CAAX,CAAR;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,GAFQ,CAAT,CAVoB,CAcpB;;AACA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAI,CAACP,SAAL,EACE,OAAO,KAAP;AAEF,QAAKA,SAAS,CAAC,CAAD,CAAT,IAAgBO,KAAK,CAAC,CAAD,CAAtB,IAA+BP,SAAS,CAAC,CAAD,CAAT,IAAgBO,KAAK,CAAC,CAAD,CAAxD,EACE,OAAO,IAAP;AACH,GAND,CAfoB,CAuBpB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACGL,KAAK,CAACM,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AACtB,0BAAO,QAAC,IAAD;AAEC,QAAA,KAAK,EAAI,CAACD,IAAI,CAACC,CAAN,EAASD,IAAI,CAACE,CAAd,CAFV;AAGC,QAAA,UAAU,EAAIF,IAAI,CAACG,UAHpB;AAIC,QAAA,WAAW,EAAIN,WAJhB;AAKC,QAAA,YAAY,EAAIL;AALjB,SACMS,CADN;AAAA;AAAA;AAAA;AAAA,cAAP;AAOD,KARA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA/CQZ,K;;KAAAA,K;AAiDT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { emptyBoard, resetBoard } from '../../utils/BoardFunctions';\n\nlet boardSize = 6;\n\nfunction Board(props) {\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([])\n\n  useEffect(() => {\n    console.log(\"hi\");\n    setTiles(resetBoard(boardSize));\n  }, [])\n\n  useEffect(() => {\n    console.log(\"updated\");\n  })\n\n  // Check if a tile is currently focused\n  const isFocusTile = (coord) => {\n    if (!focusTile) \n      return false;\n\n    if ((focusTile[0] == coord[0]) && (focusTile[1] == coord[1]))\n      return true;\n  }\n\n  // // Determines what color a tile will be\n  // const getColor = (coord) => {\n  //   console.log(\"coord in getColor:\", coord)\n  //   let i = coord[0]\n  //   let j = coord[1]\n\n  //   if (((i % 2 == 0) && (j % 2 == 0)) | ((i % 2 == 1) && (j % 2 == 1)))\n  //     return 0;\n  //   return 1;\n  // }\n\n  return (\n    <div className=\"board\">\n      {tiles.map((tile, i) => {\n        return <Tile \n                key={i}\n                coord = {[tile.i, tile.j]}\n                hasChecker = {tile.hasChecker}\n                isFocusTile = {isFocusTile}\n                setFocusTile = {setFocusTile}\n               /> \n      })}\n    </div>\n  );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}