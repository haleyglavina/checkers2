{"ast":null,"code":"import { getTileIndex } from './BoardFunctions';\n/*\n// Define tiles with no checkers on them\n*/\n\nexport const emptyBoard = boardSize => {\n  let tile = [];\n\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tile.push({\n        i,\n        j,\n        hasChecker: null\n      });\n    }\n  }\n\n  return tile;\n};\n/*\n// Define tiles where p1 pawns remain and cant move, so p2 wins\n// Assumes a boardSize of 8\n*/\n\nexport const pawnCantMove = () => {\n  tiles = emptyBoard(8);\n  p1Pawn = {};\n  p2Pawn = {};\n  tiles[getTileIndex(3, 3, 8)] = p1Pawn;\n  tiles[getTileIndex(4, 2, 8)] = p2Pawn;\n  tiles[getTileIndex(5, 1, 8)] = p2Pawn;\n  tiles[getTileIndex(4, 4, 8)] = p2Pawn;\n  tiles[getTileIndex(5, 5, 8)] = p2Pawn;\n};","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/client/src/utils/BoardTestSetup.js"],"names":["getTileIndex","emptyBoard","boardSize","tile","i","j","push","hasChecker","pawnCantMove","tiles","p1Pawn","p2Pawn"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAIC,SAAD,IAAe;AACvC,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClC;AACAF,MAAAA,IAAI,CAACG,IAAL,CAAU;AAACF,QAAAA,CAAD;AAAIC,QAAAA,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAAV;AACD;AACF;;AACD,SAAOJ,IAAP;AACD,CATM;AAWP;AACA;AACA;AACA;;AACA,OAAO,MAAMK,YAAY,GAAG,MAAM;AAChCC,EAAAA,KAAK,GAAGR,UAAU,CAAC,CAAD,CAAlB;AACAS,EAAAA,MAAM,GAAG,EAAT;AAIAC,EAAAA,MAAM,GAAG,EAAT;AAIAF,EAAAA,KAAK,CAACT,YAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAb,CAAL,GAA6BU,MAA7B;AACAD,EAAAA,KAAK,CAACT,YAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAb,CAAL,GAA6BW,MAA7B;AACAF,EAAAA,KAAK,CAACT,YAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAb,CAAL,GAA6BW,MAA7B;AACAF,EAAAA,KAAK,CAACT,YAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAb,CAAL,GAA6BW,MAA7B;AACAF,EAAAA,KAAK,CAACT,YAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAb,CAAL,GAA6BW,MAA7B;AACD,CAfM","sourcesContent":["import { getTileIndex } from './BoardFunctions';\n\n/*\n// Define tiles with no checkers on them\n*/\nexport const emptyBoard = (boardSize) => {\n  let tile = []\n  for (let i = 0; i < boardSize; i++) {\n    for (let j = 0; j < boardSize; j++) {\n      // [x, y, hasChecker]\n      tile.push({i, j, hasChecker: null});\n    }\n  }\n  return tile;\n}\n\n/*\n// Define tiles where p1 pawns remain and cant move, so p2 wins\n// Assumes a boardSize of 8\n*/\nexport const pawnCantMove = () => {\n  tiles = emptyBoard(8);\n  p1Pawn = {\n\n  };\n\n  p2Pawn = {\n    \n  }\n\n  tiles[getTileIndex(3,3,8)] = p1Pawn;\n  tiles[getTileIndex(4,2,8)] = p2Pawn;\n  tiles[getTileIndex(5,1,8)] = p2Pawn;\n  tiles[getTileIndex(4,4,8)] = p2Pawn;\n  tiles[getTileIndex(5,5,8)] = p2Pawn;\n}"]},"metadata":{},"sourceType":"module"}