{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { emptyBoard, resetBoard, getColor, moveChecker } from '../../utils/BoardFunctions'; // Number of tiles per row/column\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardSize = 8;\n\nfunction Board(props) {\n  _s();\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  const [boardWidth, setBoardWidth] = useState(0);\n  useEffect(() => {\n    setTiles(resetBoard(boardSize)); // Determine size of the board\n\n    if (window.innerWidth < window.innerHeight) setBoardWidth(window.innerWidth * 0.7);else setBoardWidth(window.innerHeight * 0.7);\n  }, []);\n  useEffect(() => {\n    console.log(\"updated Board\");\n    console.log('board width: ', boardWidth);\n  }); // Check if a tile is currently focused\n\n  const isFocusTile = coord => {\n    if (!focusTile) return false;\n    if (focusTile[0] === coord[0] && focusTile[1] === coord[1]) return true;\n  };\n\n  const tileClicked = coord => {\n    // no focus tile yet, and empty tile clicked\n    // if no tile is focused yet and this tile contains a checker, focus this tile\n    if (!focusTile && tiles[coord[0] * boardSize + coord[1]].hasChecker) {\n      setFocusTile(coord);\n      console.log(\"this\");\n    } // if no tile is focused yet and this tile doesn't contain checker, do nothing\n    else if (!focusTile && tiles[coord[0] * boardSize + coord[1]].hasChecker) {\n      console.log(\"that\");\n      return;\n    } // if focus tile already exists, move checker from focus tile to this coord\n    else {\n      let tileRes = moveChecker(tiles, focusTile, coord, boardSize);\n      console.log(\"tileRes:\", tileRes); // setTiles(moveChecker(tiles, focusTile, coord, boardSize));\n\n      setFocusTile(null);\n    } // isFocusTile(coord) ? setFocusTile(null) : setFocusTile(coord);\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${boardSize * 88}px`,\n      height: `${boardSize * 88}px`\n    } //  onMouseDown = {startTileChosen}\n    //  onMouseUp = {endTileChosen}\n    ,\n    children: tiles.map((tile, i) => {\n      return /*#__PURE__*/_jsxDEV(Tile, {\n        coord: [tile.i, tile.j],\n        color: getColor([tile.i, tile.j]),\n        hasChecker: tile.hasChecker,\n        isFocusTile: isFocusTile,\n        setFocusTile: setFocusTile,\n        tileClicked: tileClicked\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"EPbFfPVcX3lk661SySJVEjtIGi0=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js"],"names":["React","useEffect","useState","Tile","Component","emptyBoard","resetBoard","getColor","moveChecker","boardSize","Board","props","focusTile","setFocusTile","tiles","setTiles","boardWidth","setBoardWidth","window","innerWidth","innerHeight","console","log","isFocusTile","coord","tileClicked","hasChecker","tileRes","width","height","map","tile","i","j"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { emptyBoard, resetBoard, getColor, moveChecker } from '../../utils/BoardFunctions';\n\n// Number of tiles per row/column\nlet boardSize = 8;\n\nfunction Board(props) {\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  const [boardWidth, setBoardWidth] = useState(0);\n\n  useEffect(() => {\n    setTiles(resetBoard(boardSize));\n\n    // Determine size of the board\n    if (window.innerWidth < window.innerHeight)\n      setBoardWidth(window.innerWidth * 0.7);\n    else\n      setBoardWidth(window.innerHeight * 0.7);\n    \n  }, [])\n\n  useEffect(() => {\n    console.log(\"updated Board\");\n    console.log('board width: ', boardWidth);\n  })\n\n  // Check if a tile is currently focused\n  const isFocusTile = (coord) => {\n    if (!focusTile) \n      return false;\n\n    if ((focusTile[0] === coord[0]) && (focusTile[1] === coord[1]))\n      return true;\n  }\n\n  const tileClicked = (coord) => {\n    // no focus tile yet, and empty tile clicked\n\n    // if no tile is focused yet and this tile contains a checker, focus this tile\n    if (!focusTile && tiles[(coord[0] * boardSize) + coord[1]].hasChecker) {\n      setFocusTile(coord);\n      console.log(\"this\")\n    }\n      \n\n    // if no tile is focused yet and this tile doesn't contain checker, do nothing\n    else if (!focusTile && tiles[(coord[0] * boardSize) + coord[1]].hasChecker) {\n      console.log(\"that\")\n      return;\n    }\n      \n\n    // if focus tile already exists, move checker from focus tile to this coord\n    else {\n      let tileRes = moveChecker(tiles, focusTile, coord, boardSize)\n      console.log(\"tileRes:\", tileRes)\n      // setTiles(moveChecker(tiles, focusTile, coord, boardSize));\n      setFocusTile(null);\n    }\n    // isFocusTile(coord) ? setFocusTile(null) : setFocusTile(coord);\n  }\n\n  return (\n    <div className = \"board\" \n         style = {{width: `${boardSize * 88}px`, height: `${boardSize * 88}px`}}\n        //  onMouseDown = {startTileChosen}\n        //  onMouseUp = {endTileChosen}\n    >\n      {tiles.map((tile, i) => {\n        return <Tile \n                key={i}\n                coord = {[tile.i, tile.j]}\n                color = {getColor([tile.i, tile.j])}\n                hasChecker = {tile.hasChecker}\n                isFocusTile = {isFocusTile}\n                setFocusTile = {setFocusTile}\n                tileClicked = {tileClicked}\n               /> \n      })}\n    </div>\n  );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}