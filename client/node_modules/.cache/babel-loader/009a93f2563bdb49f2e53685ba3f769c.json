{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { emptyBoard, resetBoard, getColor } from '../../utils/BoardFunctions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardSize = 8;\n\nfunction Board(props) {\n  _s();\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  useEffect(() => {\n    setTiles(resetBoard(boardSize)); // Determine size of the board\n\n    let boardWidth = 0;\n    if (window.innerWidth < window.innerHeight) boardWidth = window.innerWidth;else boardWidth = window.innerHeight;\n    console.log('boardWidth: ', boardWidth);\n  }, []);\n  useEffect(() => {\n    console.log(\"updated Board\");\n  }); // Check if a tile is currently focused\n\n  const isFocusTile = coord => {\n    if (!focusTile) return false;\n    if (focusTile[0] === coord[0] && focusTile[1] === coord[1]) return true;\n  };\n\n  const startTileChosen = e => {\n    console.log(\"start on:\", e.target);\n  };\n\n  const endTileChosen = e => {\n    console.log(\"end on:\", e.target);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${boardSize * 88}px`,\n      height: `${boardSize * 88}px`\n    } //  onMouseDown = {startTileChosen}\n    //  onMouseUp = {endTileChosen}\n    ,\n    children: tiles.map((tile, i) => {\n      return /*#__PURE__*/_jsxDEV(Tile, {\n        coord: [tile.i, tile.j],\n        color: getColor([tile.i, tile.j]),\n        hasChecker: tile.hasChecker,\n        isFocusTile: isFocusTile,\n        setFocusTile: setFocusTile\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"tVYNUwbJoTGcNDkZeLkzMPDLM5E=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js"],"names":["React","useEffect","useState","Tile","Component","emptyBoard","resetBoard","getColor","boardSize","Board","props","focusTile","setFocusTile","tiles","setTiles","boardWidth","window","innerWidth","innerHeight","console","log","isFocusTile","coord","startTileChosen","e","target","endTileChosen","width","height","map","tile","i","j","hasChecker"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,QAAiD,4BAAjD;;AAEA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAEpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,QAAQ,CAACR,UAAU,CAACE,SAAD,CAAX,CAAR,CADc,CAGd;;AACA,QAAIO,UAAU,GAAG,CAAjB;AACA,QAAIC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACE,WAA/B,EACEH,UAAU,GAAGC,MAAM,CAACC,UAApB,CADF,KAGEF,UAAU,GAAGC,MAAM,CAACE,WAApB;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA6BL,UAA7B;AACD,GAVQ,EAUN,EAVM,CAAT;AAYAd,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAFQ,CAAT,CAjBoB,CAqBpB;;AACA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAI,CAACX,SAAL,EACE,OAAO,KAAP;AAEF,QAAKA,SAAS,CAAC,CAAD,CAAT,KAAiBW,KAAK,CAAC,CAAD,CAAvB,IAAgCX,SAAS,CAAC,CAAD,CAAT,KAAiBW,KAAK,CAAC,CAAD,CAA1D,EACE,OAAO,IAAP;AACH,GAND;;AAQA,QAAMC,eAAe,GAAIC,CAAD,IAAO;AAC7BL,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBI,CAAC,CAACC,MAA3B;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAIF,CAAD,IAAO;AAC3BL,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBI,CAAC,CAACC,MAAzB;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAG,OAAjB;AACK,IAAA,KAAK,EAAI;AAACE,MAAAA,KAAK,EAAG,GAAEnB,SAAS,GAAG,EAAG,IAA1B;AAA+BoB,MAAAA,MAAM,EAAG,GAAEpB,SAAS,GAAG,EAAG;AAAzD,KADd,CAEI;AACA;AAHJ;AAAA,cAKGK,KAAK,CAACgB,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AACtB,0BAAO,QAAC,IAAD;AAEC,QAAA,KAAK,EAAI,CAACD,IAAI,CAACC,CAAN,EAASD,IAAI,CAACE,CAAd,CAFV;AAGC,QAAA,KAAK,EAAIzB,QAAQ,CAAC,CAACuB,IAAI,CAACC,CAAN,EAASD,IAAI,CAACE,CAAd,CAAD,CAHlB;AAIC,QAAA,UAAU,EAAIF,IAAI,CAACG,UAJpB;AAKC,QAAA,WAAW,EAAIZ,WALhB;AAMC,QAAA,YAAY,EAAIT;AANjB,SACMmB,CADN;AAAA;AAAA;AAAA;AAAA,cAAP;AAQD,KATA;AALH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAxDQtB,K;;KAAAA,K;AA0DT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { emptyBoard, resetBoard, getColor } from '../../utils/BoardFunctions';\n\nlet boardSize = 8;\n\nfunction Board(props) {\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([])\n\n  useEffect(() => {\n    setTiles(resetBoard(boardSize));\n\n    // Determine size of the board\n    let boardWidth = 0;\n    if (window.innerWidth < window.innerHeight)\n      boardWidth = window.innerWidth;\n    else\n      boardWidth = window.innerHeight;\n    console.log('boardWidth: ',  boardWidth)\n  }, [])\n\n  useEffect(() => {\n    console.log(\"updated Board\");\n  })\n\n  // Check if a tile is currently focused\n  const isFocusTile = (coord) => {\n    if (!focusTile) \n      return false;\n\n    if ((focusTile[0] === coord[0]) && (focusTile[1] === coord[1]))\n      return true;\n  }\n\n  const startTileChosen = (e) => {\n    console.log(\"start on:\", e.target);\n  }\n\n  const endTileChosen = (e) => {\n    console.log(\"end on:\", e.target);\n  }\n\n  return (\n    <div className = \"board\" \n         style = {{width: `${boardSize * 88}px`, height: `${boardSize * 88}px`}}\n        //  onMouseDown = {startTileChosen}\n        //  onMouseUp = {endTileChosen}\n    >\n      {tiles.map((tile, i) => {\n        return <Tile \n                key={i}\n                coord = {[tile.i, tile.j]}\n                color = {getColor([tile.i, tile.j])}\n                hasChecker = {tile.hasChecker}\n                isFocusTile = {isFocusTile}\n                setFocusTile = {setFocusTile}\n               /> \n      })}\n    </div>\n  );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}