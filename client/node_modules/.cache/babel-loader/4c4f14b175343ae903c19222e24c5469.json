{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js\";\nimport React, { useEffect, useState } from 'react';\nimport './Board.css';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardSize = 7;\nlet coords = [];\n\nfor (let i = 0; i < boardSize; i++) {\n  for (let j = 0; j < boardSize; j++) {\n    coords.push([i, j]);\n  }\n}\n\nfunction Board(props) {\n  // const [boardSize, setboardSize] = useState(7);\n  // const [tiles, setTiles] = useState([]);\n  // const [coord, setCoord] = useState([]);\n  // // Create tile coordinates on page load\n  // useEffect(() => {\n  //   let coordinates = [];\n  //   for (let i = 0; i < boardSize; i++) {\n  //     for (let j = 0; j < boardSize; j++) {\n  //       coordinates.push([i, j]);\n  //     }\n  //   }\n  //   setCoord(coordinates)\n  // })\n  // Determines what color a tile will be\n  const getColor = coord => {\n    let i = coord[0];\n    let j = coord[1];\n    if ((i % 2 == 0 && j % 2 == 0) | (i % 2 == 1 && j % 2 == 1)) return 0;\n    return 1;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"board\",\n    children: tiles.map(coord => {\n      return /*#__PURE__*/_jsxDEV(Tile, {\n        x: coord[0],\n        y: coord[1],\n        color: getColor(coord)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n} // class Board extends Component {\n//   // state = {\n//   //   boardSize: 7\n//   // }\n//   render() {\n//     return (\n//       <div>\n//       </div>\n//     );\n//   }\n// }\n\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js"],"names":["React","useEffect","useState","Tile","Component","boardSize","coords","i","j","push","Board","props","getColor","coord","tiles","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,IAAIC,SAAS,GAAG,CAAhB;AACA,IAAIC,MAAM,GAAG,EAAb;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,EAAhC,EAAoC;AAClC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAClCF,IAAAA,MAAM,CAACG,IAAP,CAAY,CAACF,CAAD,EAAIC,CAAJ,CAAZ;AACD;AACF;;AAED,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAEpB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAIN,CAAC,GAAGM,KAAK,CAAC,CAAD,CAAb;AACA,QAAIL,CAAC,GAAGK,KAAK,CAAC,CAAD,CAAb;AAEA,QAAI,CAAEN,CAAC,GAAG,CAAJ,IAAS,CAAV,IAAiBC,CAAC,GAAG,CAAJ,IAAS,CAA3B,KAAmCD,CAAC,GAAG,CAAJ,IAAS,CAAV,IAAiBC,CAAC,GAAG,CAAJ,IAAS,CAA5D,CAAJ,EACE,OAAO,CAAP;AACF,WAAO,CAAP;AACD,GAPD;;AASA,sBACE;AAAK,IAAA,KAAK,EAAC,OAAX;AAAA,cACGM,KAAK,CAACC,GAAN,CAAUF,KAAK,IAAI;AAClB,0BAAO,QAAC,IAAD;AAAM,QAAA,CAAC,EAAEA,KAAK,CAAC,CAAD,CAAd;AAAmB,QAAA,CAAC,EAAEA,KAAK,CAAC,CAAD,CAA3B;AAAgC,QAAA,KAAK,EAAED,QAAQ,CAACC,KAAD;AAA/C;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;KAjDSH,K;AAoDT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Board.css';\nimport Tile from '../Tile/Tile';\nimport { Component } from 'react';\n\nlet boardSize = 7;\nlet coords = []\nfor (let i = 0; i < boardSize; i++) {\n  for (let j = 0; j < boardSize; j++) {\n    coords.push([i, j]);\n  }\n}\n\nfunction Board(props) {\n\n  // const [boardSize, setboardSize] = useState(7);\n  // const [tiles, setTiles] = useState([]);\n  // const [coord, setCoord] = useState([]);\n\n  // // Create tile coordinates on page load\n  // useEffect(() => {\n  //   let coordinates = [];\n  //   for (let i = 0; i < boardSize; i++) {\n  //     for (let j = 0; j < boardSize; j++) {\n  //       coordinates.push([i, j]);\n  //     }\n  //   }\n\n  //   setCoord(coordinates)\n  // })\n\n  // Determines what color a tile will be\n  const getColor = (coord) => {\n    let i = coord[0]\n    let j = coord[1]\n\n    if (((i % 2 == 0) && (j % 2 == 0)) | ((i % 2 == 1) && (j % 2 == 1)))\n      return 0;\n    return 1;\n  }\n\n  return (\n    <div class=\"board\">\n      {tiles.map(coord => {\n        return <Tile x={coord[0]} y={coord[1]} color={getColor(coord)}/> \n      })}\n    </div>\n  );\n}\n\n// class Board extends Component {\n//   // state = {\n//   //   boardSize: 7\n//   // }\n\n//   render() {\n//     return (\n//       <div>\n        \n//       </div>\n//     );\n//   }\n// }\n\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}