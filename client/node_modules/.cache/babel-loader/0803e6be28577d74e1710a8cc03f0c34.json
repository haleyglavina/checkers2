{"ast":null,"code":"var _jsxFileName = \"/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile'; // import { Component } from 'react';\n\nimport { resetBoard, getColor, moveChecker } from '../../utils/BoardFunctions'; // Number of tiles per row/column\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet boardSize = 8;\n\nfunction Board(props) {\n  _s();\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  const [boardWidth, setBoardWidth] = useState(0);\n  useEffect(() => {\n    setTiles(resetBoard(boardSize)); // Determine size of the board\n\n    if (window.innerWidth < window.innerHeight) setBoardWidth(window.innerWidth * 0.7);else setBoardWidth(window.innerHeight * 0.7);\n  }, []);\n  useEffect(() => {// console.log(\"updated Board\");\n    // console.log('board width: ', boardWidth);\n  }); // Check if a tile is currently focused\n\n  const isFocusTile = coord => {\n    if (!focusTile) return false;\n    if (focusTile[0] === coord[0] && focusTile[1] === coord[1]) return true;\n  };\n\n  const tileClicked = coord => {\n    // if no tile is focused yet and this tile contains a checker, focus this tile\n    if (!focusTile && tiles[coord[0] * boardSize + coord[1]].hasChecker) {\n      setFocusTile(coord);\n    } // if no tile is focused yet and this tile doesn't contain checker, do nothing\n    else if (!focusTile && !tiles[coord[0] * boardSize + coord[1]].hasChecker) {\n      return;\n    } // if focus tile already exists, move checker from focus tile to this coord\n    else {\n      setTiles(moveChecker(tiles, focusTile, coord, boardSize, props.updateScore));\n      setFocusTile(null);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    style: {\n      width: `${boardSize * 88}px`,\n      height: `${boardSize * 88}px`\n    },\n    children: tiles.map((tile, i) => {\n      return /*#__PURE__*/_jsxDEV(Tile, {\n        coord: [tile.i, tile.j],\n        color: getColor([tile.i, tile.j]),\n        hasChecker: tile.hasChecker,\n        isFocusTile: isFocusTile,\n        setFocusTile: setFocusTile,\n        tileClicked: tileClicked\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"EPbFfPVcX3lk661SySJVEjtIGi0=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/haleyglavina/Desktop/code/checkers2/src/components/Board/Board.js"],"names":["React","useEffect","useState","Tile","resetBoard","getColor","moveChecker","boardSize","Board","props","focusTile","setFocusTile","tiles","setTiles","boardWidth","setBoardWidth","window","innerWidth","innerHeight","isFocusTile","coord","tileClicked","hasChecker","updateScore","width","height","map","tile","i","j"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Board.scss';\nimport Tile from '../Tile/Tile';\n// import { Component } from 'react';\nimport { resetBoard, getColor, moveChecker } from '../../utils/BoardFunctions';\n\n// Number of tiles per row/column\nlet boardSize = 8;\n\nfunction Board(props) {\n\n  const [focusTile, setFocusTile] = useState(null);\n  const [tiles, setTiles] = useState([]);\n  const [boardWidth, setBoardWidth] = useState(0);\n\n  useEffect(() => {\n    setTiles(resetBoard(boardSize));\n\n    // Determine size of the board\n    if (window.innerWidth < window.innerHeight)\n      setBoardWidth(window.innerWidth * 0.7);\n    else\n      setBoardWidth(window.innerHeight * 0.7);\n    \n  }, [])\n\n  useEffect(() => {\n    // console.log(\"updated Board\");\n    // console.log('board width: ', boardWidth);\n  })\n\n  // Check if a tile is currently focused\n  const isFocusTile = (coord) => {\n    if (!focusTile) \n      return false;\n\n    if ((focusTile[0] === coord[0]) && (focusTile[1] === coord[1]))\n      return true;\n  }\n\n  const tileClicked = (coord) => {\n    // if no tile is focused yet and this tile contains a checker, focus this tile\n    if (!focusTile && tiles[(coord[0] * boardSize) + coord[1]].hasChecker) {\n      setFocusTile(coord);\n    }\n      \n    // if no tile is focused yet and this tile doesn't contain checker, do nothing\n    else if (!focusTile && !tiles[(coord[0] * boardSize) + coord[1]].hasChecker) {\n      return;\n    }\n\n    // if focus tile already exists, move checker from focus tile to this coord\n    else {\n      setTiles(moveChecker(tiles, focusTile, coord, boardSize, props.updateScore));\n      setFocusTile(null);\n    }\n  }\n\n  return (\n    <div className = \"board\" \n         style = {{width: `${boardSize * 88}px`, height: `${boardSize * 88}px`}}\n    >\n      {tiles.map((tile, i) => {\n        return <Tile \n                key={i}\n                coord = {[tile.i, tile.j]}\n                color = {getColor([tile.i, tile.j])}\n                hasChecker = {tile.hasChecker}\n                isFocusTile = {isFocusTile}\n                setFocusTile = {setFocusTile}\n                tileClicked = {tileClicked}\n               /> \n      })}\n    </div>\n  );\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}